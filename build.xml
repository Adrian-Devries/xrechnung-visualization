<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="xrechnung-visualization" default="test">

    <!-- project directory structure -->
    <property name="dist.dir" location="${basedir}/dist"/>
    <property name="lib.dir" location="${basedir}/lib"/>
    <property name="build.dir" location="${basedir}/build"/>
    <property name="src.dir" location="${basedir}/src"/>
    <property name="download.dir" location="${build.dir}/download"/>

    <property name="saxon.jar" value="saxon9he.jar"/>

    <!-- Test resources -->
    <property name="validator.jar" value="validationtool-1.0.1-standalone.jar"/>
    <property name="validator.config.download.url.base"
        value="https://github.com/itplr-kosit/validator-configuration-xrechnung/releases/download"/>
    <property name="validator.config.release.version" value="release-2018-08-31"/>
    <property name="validator.config.zip"
        value="validator-configuration-xrechnung_1.1_2018-08-31.zip"/>
    <property name="validator.repository.dir"
        location="${build.dir}/xrechnung-configuration-repository"/>

    <!-- vnu html validator -->
    <property name="vnu.jar" value="vnu.jar"/>
    <property name="vnu.version" value="18.11.5"/>
    <property name="vnu.zip" value="${vnu.jar}_${vnu.version}.zip"/>

    <property name="vnu.download.url"
        value="https://github.com/validator/validator/releases/download/${vnu.version}/${vnu.zip}"/>

    <property name="xr.testsuite.docs.download.url.base"
        value="https://raw.githubusercontent.com/itplr-kosit/xrechnung-testsuite/master/instances"/>


    <property name="test.src.dir" location="${src.dir}/test"/>
    <property name="test.build.dir" location="${build.dir}/test"/>
    <property name="test.docs.dir" location="${test.build.dir}/instances"/>
    <property name="test.transformed.dir"
        location="${test.build.dir}/transformed"/>
    <property name="test.transformed.html.dir" location="${test.build.dir}/html"/>
    <property name="test.reports.dir" location="${test.build.dir}/reports"/>

    <property name="xrechnung.version" value="1.1"/>

    <property name="xrechnung.xsd.ns"
        value="urn:ce.eu:en16931:2017:xoev-de:kosit:standard:xrechnung-1"/>

    <target name="init"
        description="Initializes build directory structure and ISO timestamp">
        <!-- Create timestamps -->
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd"/>
        </tstamp>

        <echo>Build date: ${build.date}</echo>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${download.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${test.docs.dir}"/>
        <mkdir dir="${test.transformed.dir}"/>
        <mkdir dir="${test.transformed.html.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${validator.repository.dir}"/>

    </target>


    <target name="prepare-saxon" depends="init"
        description="Download Saxon-HE and add jar to library directory">
        <get
            src="https://sourceforge.net/projects/saxon/files/Saxon-HE/9.8/SaxonHE9-8-0-8J.zip/download"
            dest="${download.dir}/SaxonHE9-8-0-8J.zip" verbose="true"
            skipexisting="true" usetimestamp="true"/>
        <fail unless="saxon.jar"
            message="Provide a name for the extracted saxon jar"/>


        <unzip src="${download.dir}/SaxonHE9-8-0-8J.zip" dest="${lib.dir}">
            <patternset>
                <include name="**/${saxon.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>

    <target name="prepare-validationtool" depends="init"
        description="Download KoSIT validation tool and add jar to library directory">
        <get
            src="https://github.com/itplr-kosit/validator/releases/download/validationtool-1_0_1/validationtool-dist-1.0.1-standalone.zip"
            dest="${download.dir}" verbose="true" skipexisting="true"
            usetimestamp="true"/>
        <!-- Cause unzip task does not error on missing dest directory -->

        <fail message="Lib directory ${lib.dir} does not exist!">
            <condition>
                <not>
                    <available file="${lib.dir}"/>
                </not>
            </condition>
        </fail>

        <fail unless="validator.jar"
            message="Need to specify property with name 'validator.jar'"/>
        <unzip src="${download.dir}/validationtool-dist-1.0.1-standalone.zip"
            dest="${lib.dir}">
            <patternset>
                <include name="**/${validator.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>


    <target name="prepare-vnu" depends="init" description="Download vNU">

        <get src="${vnu.download.url}" dest="${download.dir}" verbose="true"
            skipexisting="true" usetimestamp="true"/>
        <!-- Cause unzip task does not error on missing dest directory -->

        <fail message="Lib directory ${lib.dir} does not exist!">
            <condition>
                <not>
                    <available file="${lib.dir}"/>
                </not>
            </condition>
        </fail>

        <fail unless="vnu.jar"
            message="Need to specify property with name 'vnu.jar'"/>
        <unzip src="${download.dir}/${vnu.zip}" dest="${lib.dir}">
            <patternset>
                <include name="**/${vnu.jar}"/>
            </patternset>
            <flattenmapper/>
        </unzip>
    </target>

    <target name="prepare-validator-configuration"
        depends="prepare-validationtool">
        <get
            src="${validator.config.download.url.base}/${validator.config.release.version}/${validator.config.zip}"
            dest="${download.dir}" verbose="true" skipexisting="true"
            usetimestamp="true"/>
        <unzip src="${download.dir}/${validator.config.zip}"
            dest="${validator.repository.dir}"/>
    </target>


    <target name="prepare-testsuite" depends="init">
        <copy todir="${test.build.dir}" verbose="true">
            <fileset dir="${test.src.dir}" includes="**/*.xml"/>
        </copy>

        <loadfile property="urls"
            srcFile="${test.src.dir}/testsuite-instances.txt">
            <filterchain>
                <prefixlines prefix="${xr.testsuite.docs.download.url.base}/"/>
            </filterchain>
        </loadfile>

        <echo message="${urls}"
            file="${test.build.dir}/testsuite-instance-urls.txt"/>

        <get dest="${test.docs.dir}" verbose="true" skipexisting="true"
            usetimestamp="true">

            <resourcelist>
                <file name="${test.build.dir}/testsuite-instance-urls.txt"/>
            </resourcelist>
        </get>
    </target>

    <target name="transform-ubl-invoice-to-xr"
        depends="prepare-testsuite, prepare-saxon">
        <xslt basedir="${test.docs.dir}" destdir="${test.transformed.dir}"
            style="${src.dir}/xsl/ubl-invoice-xr.xsl"
            includes="**/*ubl.xml,**/maxRechnung.xml">

            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <mapper type="glob" from="*.xml" to="*-xr.xml"/>
        </xslt>
    </target>


    <target name="transform-ubl-creditnote-to-xr"
        depends="prepare-testsuite, prepare-saxon">
        <xslt basedir="${test.docs.dir}" destdir="${test.transformed.dir}"
            style="${src.dir}/xsl/ubl-creditnote-xr.xsl"
            includes="**/maxRechnung-creditnote.xml">

            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <mapper type="glob" from="*.xml" to="*-xr.xml"/>
        </xslt>
    </target>


    <target name="transform-cii-to-xr"
        depends="prepare-testsuite, prepare-saxon">
        <xslt basedir="${test.docs.dir}" destdir="${test.transformed.dir}"
            style="${src.dir}/xsl/cii-xr.xsl" includes="**/*uncefact.xml">
            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <mapper type="glob" from="*.xml" to="*-xr.xml"/>
        </xslt>
    </target>

    <target name="transform-ubl-to-xr"
        description="Transforms UBl Invoice and
        CreditNote to XRechnung Semantic Model"
        depends="transform-ubl-invoice-to-xr, transform-ubl-creditnote-to-xr">
        <!-- Just container for both transformations -->
    </target>

    <target name="transform-xr-to-html" depends="transform-ubl-to-xr">
        <xslt basedir="${test.transformed.dir}"
            destdir="${test.transformed.html.dir}"
            style="${src.dir}/xsl/xrechnung-html.xsl" includes="**/*.xml">
            <classpath location="${lib.dir}/${saxon.jar}"/>
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <mapper type="glob" from="*.xml" to="*.html"/>
        </xslt>
    </target>


    <target name="test-testsuite"
        depends="prepare-validationtool,prepare-validator-configuration, prepare-testsuite"
        description="Testsuite validation with Validator XRechnung Configuration">
        <echo>Creating validation reports ...</echo>
        <java jar="${lib.dir}/${validator.jar}" failonerror="yes" fork="yes"
            dir="${basedir}">
            <arg value="-s"/>
            <arg value="${validator.repository.dir}/scenarios.xml"/>

            <arg value="-r"/>
            <arg value="${validator.repository.dir}"/>
            <arg value="-h"/>
            <arg value="-o"/>
            <arg value="${test.reports.dir}"/>
            <arg value="${test.docs.dir}/*.xml"/>
        </java>
    </target>


    <target name="test-html" depends="prepare-vnu,transform-xr-to-html"
        description="Tests HTML generation with vNU b W3C">
        <echo>Validating HTML ...</echo>
        <java jar="${lib.dir}/${vnu.jar}" failonerror="false" fork="yes"
            dir="${basedir}" logerror="true">
            <arg value="--skip-non-html"/>
            <arg value="${test.transformed.html.dir}"/>
            
        </java>
    </target>

    <target name="test-xr-transformation" depends="transform-ubl-to-xr">
        <schemavalidate fullchecking="yes" failonerror="yes" warn="true"
            lenient="false">
            <schema namespace="${xrechnung.xsd.ns}"
                file="${src.dir}/xsd/xrechnung-semantic-model.xsd"/>

            <fileset dir="${test.transformed.dir}" includes="*.xml"/>
        </schemavalidate>
    </target>

    <!-- Just testing that task schemavalidate works cause it does not emit any
        message on success -->
    <target name="direct-test-transformation">
        <schemavalidate fullchecking="yes" failonerror="yes" warn="true"
            lenient="false">
            <fileset dir="${test.transformed.dir}" includes="*.xml"/>
            <schema namespace="${xrechnung.xsd.ns}"
                file="${src.dir}/xsd/xrechnung-semantic-model.xsd"/>

        </schemavalidate>
    </target>


    <target name="test" depends="test-testsuite, test-xr-transformation"
        description="Validates source UBL or CII XML against XRechnung,
        transofrms to XR Sem Model and schema validates results"/>

    <target name="dist" depends="test">
        <zip
            destfile="${dist.dir}/xrechnung_${xrechnung.version}_${ant.project.name}_${build.date}.zip"
            basedir="${src.dir}" excludes="download/**,test/**"/>
    </target>

    <target name="clean">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}" verbose="true" includeEmptyDirs="true"/>
        <delete dir="${dist.dir}"/>
    </target>
</project>
